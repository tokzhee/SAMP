@using App.Core.BusinessLogic
@model List<App.Web.Models.MakerCheckerLogModel>

@if (TempData["Alert"] != null)
{
    @Html.Partial("_Alert", TempData["Alert"])
}

@if (Model != null && Model.Count > 0)
{
    <table id="order-listing" class="table table-striped table-hover table-responsive table-borderless">
        <thead>
            <tr>
                <th> <strong>#</strong> </th>
                <th> <strong>Action</strong> </th>
                @*<th> <strong>Details</strong> </th>*@
                <th> <strong>Maker Id</strong> </th>
                <th> <strong>Maker Name</strong> </th>
                <th> <strong>Maker SolId</strong> </th>
                <th> <strong>Status</strong> </th>
                <th> <strong>Date Logged</strong> </th>
                <th> <strong>Checker Id</strong> </th>
                <th> <strong>Checker Name</strong> </th>
                <th> <strong>Checker SolId</strong> </th>
                <th> <strong>Checker Remarks</strong> </th>
                <th> <strong>Date Checked</strong> </th>
                <th> &nbsp; </th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < Model.Count; i++)
            {
            <tr>
                <td> @(i + 1). </td>
                <td>@Html.DisplayFor(model => model[i].ActionName)</td>
                @*
                    <td>
            @{
                var actionDetails = Model[i].ActionDetails.Split('|');
            }

            @if (actionDetails.Length > 0)
            {
                <ol>
                    @for (int j = 0; j < actionDetails.Length; j++)
                    {
                        <li>
                            @actionDetails[j]
                        </li>
                    }
                </ol>
            }
        </td>
                *@
                <td>@Html.DisplayFor(model => model[i].MakerId)</td>
                <td>@Html.DisplayFor(model => model[i].MakerFullname) </td>
                <td>@Html.DisplayFor(model => model[i].MakerSolId) </td>
                <td>
                    @switch (Convert.ToInt16(Model[i].MakerCheckerStatus))
                    {
                        case (int)MakerCheckerStatus.Initiated:
                            <span class="badge badge-info">
                                Pending
                            </span>
                            break;
                        case (int)MakerCheckerStatus.Approved:
                            <span class="badge badge-success">
                                Approved
                            </span>
                            break;
                        case (int)MakerCheckerStatus.Rejected:
                            <span class="badge badge-danger">
                                Rejected
                            </span>
                            break;
                        default:
                            break;
                    }
                </td>
                <td>@Html.DisplayFor(model => model[i].DateMade)</td>
                <td>@Html.DisplayFor(model => model[i].CheckerId) </td>
                <td>@Html.DisplayFor(model => model[i].CheckerFullname) </td>
                <td>@Html.DisplayFor(model => model[i].CheckerSolId) </td>
                <td>@Html.DisplayFor(model => model[i].CheckerRemarks)</td>
                <td>@Html.DisplayFor(model => model[i].DateChecked) </td>
                <td>
                    @if (Model[i].MakerCheckerStatus.Equals("0"))
                    {
                        <div class="btn-group-sm">
                            <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
                                <span class="caret">
                                    Options
                                </span>
                            </button>
                            <ul class="dropdown-menu" style="padding: 15px;">
                                <li class="text-center">
                                    @switch (Convert.ToInt16(Model[i].MakerCheckerCategoryId))
                                    {
                                        case (int)MakerCheckerCategory.Role:
                                            <a href="@Url.Action("ReviewPendingCreatedRole","RoleAdministration", new { q=Model[i].QueryString})" title="Review and Approve/Reject Role">
                                                Review
                                            </a>
                                            break;
                                        case (int)MakerCheckerCategory.User:
                                            <a href="@Url.Action("ReviewPendingCreatedUser","UserAdministration", new { q=Model[i].QueryString})" title="Review and Approve/Reject User">
                                                Review
                                            </a>
                                            break;
                                        case (int)MakerCheckerCategory.RoleAccess:
                                            <a href="@Url.Action("ReviewPendingAssignedRoleAccess","MenuAdministration", new { q=Model[i].QueryString})" title="Review and Approve/Reject Role Access">
                                                Review
                                            </a>
                                            break;
                                        case (int)MakerCheckerCategory.Fintech:
                                            <a href="@Url.Action("ReviewPendingCreatedAndEditedFintechProfile","ProfileAdministration", new { q=Model[i].QueryString})" title="Review and Approve/Reject Fintech Profile">
                                                Review
                                            </a>
                                            break;
                                        case (int)MakerCheckerCategory.FintechContactPerson:
                                            <a href="@Url.Action("ReviewPendingCreatedAndEditedFintechContactPerson","ProfileAdministration", new { q=Model[i].QueryString})" title="Review and Approve/Reject Fintech Contact Person">
                                                Review
                                            </a>
                                            break;
                                        case (int)MakerCheckerCategory.AccountEmployerUpdate:
                                            <a href="@Url.Action("ReviewPendingUpdatedEmployerDetail","SalaryAccountManagement", new { q=Model[i].QueryString})" title="Review and Approve/Reject Updated Employer Detail">
                                                Review
                                            </a>
                                            break;
                                        case (int)MakerCheckerCategory.RacProfiling:
                                            <a href="@Url.Action("ReviewPendingProfiledSalaryAccount","SalaryAccountManagement", new { q=Model[i].QueryString})" title="Review and Approve/Reject Profiled Salary Account">
                                                Review
                                            </a>
                                            break;
                                        default:
                                            break;
                                    }
                                </li>
                            </ul>
                        </div>
                    }
                </td>
            </tr>
            }
        </tbody>

    </table>
}
else
{
    <div class="alert alert-fill-info" role="alert">
        <i class="mdi mdi-alert-circle"></i>
        No pending records exist yet!
    </div>
}