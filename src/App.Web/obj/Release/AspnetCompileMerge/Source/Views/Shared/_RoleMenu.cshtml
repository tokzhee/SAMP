@using App.DataModels.Models
@using App.Core.Utilities
@model App.DataModels.Models.user


@{
    var fullname = $"{Model.person.surname}, {Model.person.first_name} {Model.person.middle_name}";
    var passport = Model.person.passport;
    if (string.IsNullOrEmpty(passport))
    {
        passport = "~/assets/images/user-blank.png";
    }
}

<nav class="sidebar sidebar-offcanvas sidebar-dark" id="sidebar">
    <ul class="nav">
        <li class="nav-item nav-profile">
            <a href="@Url.Action("MyProfile", "Home")">

                <img src="@Url.Content(passport)" alt="profile image" />
                <p class="text-center font-weight-medium">
                    @fullname
                </p>

            </a>

        </li>

        @{
            if (Session["RoleMenu"] != null)
            {
                var mainMenuList = (from menuIcon in CacheData.Menuicons
                                    join mainMenu in CacheData.Mainmenus on menuIcon.id equals mainMenu.menu_icon_id
                                    join subMenu in CacheData.Submenus on mainMenu.id equals subMenu.main_menu_id
                                    join roleMenu in (List<rolemenu>)Session["RoleMenu"] on subMenu.id equals roleMenu.menu_sub_id
                                    where mainMenu.active_flag.Equals(true) && subMenu.display_flag.Equals(true)
                                    select new
                                    {
                                        id = mainMenu.id,
                                        display_name = mainMenu.display_name,
                                        menu_icon_id = mainMenu.menu_icon_id,
                                        menu_icon_name = menuIcon.name,
                                        active_flag = mainMenu.active_flag,
                                        arrangement_order = mainMenu.arrangement_order

                                    }).Distinct().OrderBy(c => c.arrangement_order).ToList();

                if (mainMenuList.Count > 0)
                {
                    var mainMenuIndex = 1;
                    foreach (var mainMenu in mainMenuList)
                    {
                        mainMenuIndex++;

                        <li class="nav-item">
                            <a class="nav-link" data-toggle="collapse" href="#@mainMenu.display_name.Replace(" ", "")@mainMenuIndex" aria-expanded="false" aria-controls="@mainMenu.display_name.Replace(" ", "")@mainMenuIndex">
                                <i class="menu-icon @mainMenu.menu_icon_name"></i>
                                <span class="menu-title">
                                    @mainMenu.display_name
                                </span>
                            </a>
                            <div class="collapse" id="@mainMenu.display_name.Replace(" ", "")@mainMenuIndex">
                                <ul class="nav flex-column sub-menu">
                                    @{
                                        var subMenuList = (from subMenu in CacheData.Submenus
                                                           join roleMenu in (List<rolemenu>)Session["RoleMenu"] on subMenu.id equals roleMenu.menu_sub_id
                                                           where subMenu.main_menu_id.Equals(mainMenu.id) && subMenu.active_flag.Equals(true) && subMenu.display_flag.Equals(true)
                                                           select new
                                                           {
                                                               id = subMenu.id,
                                                               display_name = subMenu.display_name,
                                                               access_name = subMenu.access_name,
                                                               main_menu_id = subMenu.main_menu_id,
                                                               url = subMenu.url,
                                                               active_flag = subMenu.active_flag,
                                                               arrangement_order = subMenu.arrangement_order,
                                                               display_flag = subMenu.display_flag
                                                           }).OrderBy(c => c.arrangement_order).ToList();
                                    }

                                    @if (subMenuList.Count > 0)
                                    {
                                        foreach (var subMenu in subMenuList)
                                        {
                                            <li class="nav-item">
                                                <a class="nav-link" href="@ConfigurationUtility.GetAppSettingValue("ApplicationDeployedFolderPath")@subMenu.url">
                                                    <i class="menu-icon @mainMenu.menu_icon_name"></i>
                                                    @Html.Raw(subMenu.display_name)
                                                </a>
                                            </li>
                                        }
                                    }

                                </ul>
                            </div>
                        </li>
                    }
                }
            }
        }

        <li class="nav-item">
            <a class="nav-link" href="@Url.Action("LogOut", "Account")">
                <i class="menu-icon icon-logout"></i>
                <span class="menu-title">
                    Sign Out
                </span>
            </a>
        </li>
    </ul>
</nav>