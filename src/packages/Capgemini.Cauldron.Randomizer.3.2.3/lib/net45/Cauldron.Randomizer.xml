<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.Randomizer</name>
    </assembly>
    <members>
        <member name="T:Cauldron.RandomizerExtensions">
            <summary>
            Provides usefull extension methods
            </summary>
        </member>
        <member name="M:Cauldron.RandomizerExtensions.FillWithRandomValues(System.Runtime.InteropServices.GCHandle,System.Int32)">
            <summary>
            Replaces the values of data in memory with random values. The GC handle will be freed.
            </summary>
            <remarks>Will only work on <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned"/></remarks>
            <param name="target"></param>
            <param name="targetLength">The length of the data</param>
        </member>
        <member name="M:Cauldron.RandomizerExtensions.FillWithRandomValues(System.Runtime.InteropServices.GCHandle,System.Int32,System.Boolean)">
            <summary>
            Replaces the values of data in memory with random values.
            </summary>
            <remarks>Will only work on <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned"/></remarks>
            <param name="target"></param>
            <param name="targetLength">The length of the data</param>
            <param name="freeHandle">If true, the GC handle will be freed; otherwise not.</param>
        </member>
        <member name="M:Cauldron.RandomizerExtensions.RandomPick``1(``0[])">
            <summary>
            Picks a random element from the given array
            </summary>
            <typeparam name="T">The type of element in the array</typeparam>
            <param name="array">The array to pick a random element from</param>
            <returns>The randomly picked element</returns>
        </member>
        <member name="T:Cauldron.Randomizer">
            <summary>
            Provides a randomizer that is cryptographicly secure
            </summary>
        </member>
        <member name="M:Cauldron.Randomizer.GenerateLoremIpsum(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Generates a random lorem ipsum text
            </summary>
            <param name="minWords">The minimum word count to generate</param>
            <param name="maxWords">The maximum word count to generate</param>
            <param name="minSentences">The minimum sentence count to generate</param>
            <param name="maxSentences">The maximum sentence count to generate</param>
            <param name="paragraphCount">The number of paragraphs to generate</param>
            <returns>The generated lorem ipsum text</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minWords"/> is 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minSentences"/> is 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="paragraphCount"/> is 0</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="minWords"/> is greater than <paramref name="maxWords"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="minSentences"/> is greater than <paramref name="maxSentences"/>
            </exception>
        </member>
        <member name="M:Cauldron.Randomizer.Next">
            <summary>
            Returns a nonnegative random number. Cryptographic secure.
            </summary>
            <returns>A random integer value</returns>
        </member>
        <member name="M:Cauldron.Randomizer.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. Cryptographic secure.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated.maxValue must be greater
            than or equal to 0.
            </param>
            <returns>A random integer value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>
            </exception>
        </member>
        <member name="M:Cauldron.Randomizer.Next``1(``0[])">
            <summary>
            Returns a random number item from the array. Cryptographic secure.
            </summary>
            <typeparam name="T">The array item type</typeparam>
            <param name="array">The array</param>
            <returns>A random item from the array</returns>
        </member>
        <member name="M:Cauldron.Randomizer.Next(System.DateTime,System.DateTime)">
            <summary>
            Returns a random <see cref="T:System.DateTime"/> between two dates.
            </summary>
            <param name="from">The inclusive lower bound of the random date returned.</param>
            <param name="to">The exclusive upper bound of the random date to be generated.</param>
            <returns>A random date</returns>
        </member>
        <member name="M:Cauldron.Randomizer.NextBoolean">
            <summary>
            Returns a random boolean. Cryptographic secure.
            </summary>
            <returns>A random boolean</returns>
        </member>
        <member name="M:Cauldron.Randomizer.NextByte">
            <summary>
            Returns a random byte value
            </summary>
            <returns>A random byte value (0 to 255)</returns>
        </member>
        <member name="M:Cauldron.Randomizer.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0. Cryptographic secure.
            </summary>
            <returns>A random value</returns>
        </member>
        <member name="M:Cauldron.Randomizer.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random number within a specified range. Cryptographic secure.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. maxValue must be greater
            than or equal to 0.
            </param>
            <returns>A random value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>
            </exception>
        </member>
    </members>
</doc>
